package com.salveo.mysalveo.doctor;import android.Manifest;import android.annotation.SuppressLint;import android.app.Activity;import android.app.DatePickerDialog;import android.app.Dialog;import android.content.Context;import android.content.Intent;import android.content.IntentSender;import android.content.pm.PackageManager;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.Canvas;import android.graphics.Color;import android.location.Address;import android.location.Geocoder;import android.location.Location;import android.location.LocationManager;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.provider.MediaStore;import android.provider.OpenableColumns;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.cardview.widget.CardView;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.DefaultItemAnimator;import androidx.recyclerview.widget.GridLayoutManager;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.bumptech.glide.request.RequestOptions;import com.github.gcacace.signaturepad.views.SignaturePad;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.common.api.PendingResult;import com.google.android.gms.common.api.Status;import com.google.android.gms.location.LocationListener;import com.google.android.gms.location.LocationRequest;import com.google.android.gms.location.LocationServices;import com.google.android.gms.location.LocationSettingsRequest;import com.google.android.gms.location.LocationSettingsResult;import com.google.android.gms.location.LocationSettingsStatusCodes;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.SupportMapFragment;import com.google.gson.Gson;import com.salveo.mysalveo.R;import com.salveo.mysalveo.activity.location.SetLocationDoctorOldActivity;import com.salveo.mysalveo.adapter.DoctorAddEducAdapter;import com.salveo.mysalveo.adapter.DoctorAddExpAdapter;import com.salveo.mysalveo.adapter.DoctorEditCertificateListAdapter;import com.salveo.mysalveo.adapter.DoctorEditClinicImageListAdapter;import com.salveo.mysalveo.adapter.DoctorEditGovtIDListAdapter;import com.salveo.mysalveo.adapter.DoctorEditPhotoIDListAdapter;import com.salveo.mysalveo.adapter.DoctorSpecialzationListAdapter;import com.salveo.mysalveo.adapter.PetsHandledListEditAdapter;import com.salveo.mysalveo.api.APIClient;import com.salveo.mysalveo.api.RestApiInterface;import com.salveo.mysalveo.appUtils.FileUtil;import com.salveo.mysalveo.interfaces.DoctorPetHandledTypeCheckedListener;import com.salveo.mysalveo.interfaces.DoctorSpecialzationChckedListener;import com.salveo.mysalveo.requestpojo.DoctorBusinessInfoUpdateRequest;import com.salveo.mysalveo.requestpojo.DoctorDetailsByUserIdRequest;import com.salveo.mysalveo.responsepojo.DocBusInfoUploadResponse;import com.salveo.mysalveo.responsepojo.DoctorDetailsByUserIdResponse;import com.salveo.mysalveo.responsepojo.DropDownListResponse;import com.salveo.mysalveo.responsepojo.FileUploadResponse;import com.salveo.mysalveo.service.GPSTracker;import com.salveo.mysalveo.sessionmanager.SessionManager;import com.salveo.mysalveo.utils.ConnectionDetector;import com.salveo.mysalveo.utils.RestUtils;import com.salveo.mysalveo.utils.ScalingUtilities;import com.wang.avi.AVLoadingIndicatorView;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Objects;import butterknife.BindView;import butterknife.ButterKnife;import cn.pedant.SweetAlert.SweetAlertDialog;import es.dmoral.toasty.Toasty;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.RequestBody;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class EditDoctorBusinessInfoActivity extends AppCompatActivity implements View.OnClickListener, DoctorSpecialzationChckedListener, DoctorPetHandledTypeCheckedListener,        OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks,        GoogleApiClient.OnConnectionFailedListener, LocationListener {    private String TAG = "EditDoctorBusinessInfoActivity";    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_clinic_name)    EditText edittext_clinic_name;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_educ_nme)    EditText edittext_education_name;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_edu_yr)    EditText edittext_education_year;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_comp_nme)    EditText edittext_company_name;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_from)    EditText edittext_from;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_to)    EditText edittext_to;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.txt_clinic_addr)    TextView txt_clinic_addr;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_clinic_pic_choose)    EditText edtx_clinic_pic_choose;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_clinic_certif_choose)    EditText edtx_cert_pic_choose;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_clinic_govtid_choose)    EditText edtx_govt_pic_choose;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_clinic_photoid_choose)    EditText edtx_photo_pic_choose;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.buttonAddedu)    Button buttonAddedu;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.buttonAddexpr)    Button buttonAddexpr;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.buttonsubmit)    Button buttonsubmit;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcyrl_added_edu)    RecyclerView recylerView_added_education;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_added_expr)    RecyclerView recylerView_added_experience;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_speclist)    RecyclerView recylerView_specializationlist;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_pettypelist)    RecyclerView recylerView_pettypelist;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_choosen_clinic_img)    RecyclerView recylerView_choosen_clinic_images;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_choosen_certificate_img)    RecyclerView recylerView_choosen_certificate_images;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_choosen_govtid_images)    RecyclerView recylerView_choosen_govtid_images;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_choosen_photoid_img)    RecyclerView recylerView_choosen_photo_id_images;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.cdvw_certificate)    CardView material_cardview_certificate;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.img_bck)    ImageView img_bck;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.avi_indicator)    AVLoadingIndicatorView avi_indicator;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.spr_communicationtype)    Spinner spr_communicationtype;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_service_charge_amount)    EditText edtx_service_charge_amount;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.lldigitalsignature)    LinearLayout lldigitalsignature;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_clinic_number)    EditText edtx_clinic_number;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_doctor_id)    EditText edtx_doctor_id;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edtx_about_doctor)    EditText edtx_about_doctor;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.llheaderdigitalsignature)    LinearLayout llheaderdigitalsignature;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.ivdigitalsignature)    ImageView ivdigitalsignature;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.signaturePad)    SignaturePad mSignaturePad;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.clear_button)    Button mClearButton;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.save_button)    Button mSaveButton;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.txt_location_change)    TextView txt_location_change;    public static String digitalSignatureServerUrlImagePath = "";    String StoredPathDigitalSignature ="";    HashMap<Integer,String> hashMap_Communicationvalue = new HashMap<>();    String clinic_name,education_name,education_yr,cmpynm,from,to,clinic_addr;    int consultancy_fees;    ArrayList<FileUploadResponse> certificatePicResponse = new ArrayList<>();    ArrayList<FileUploadResponse>  govtIdPicResponse = new ArrayList<>();    ArrayList<FileUploadResponse> photoIdPicResponse = new ArrayList<>();    private List<DropDownListResponse.DataBean.PetHandleBean> pethandleList;    private List<DropDownListResponse.DataBean.SpecialzationBean> petSpecilaziationList;    DoctorEditClinicImageListAdapter doctorEditClinicImageListAdapter;    DoctorEditCertificateListAdapter doctorEditCertificateListAdapter;    DoctorEditGovtIDListAdapter doctorEditGovtIDListAdapter;    DoctorEditPhotoIDListAdapter doctorEditPhotoIDListAdapter;    PetsHandledListEditAdapter petsHandledListEditAdapter;    MultipartBody.Part filePart,certPart,govIdPart,photIDPart,siganaturePart;    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;    private static final int REQUEST_READ_CLINIC_PDF_PERMISSION = 787 ;    private static final int REQUEST_READ_GOVT_ID_PDF_PERMISSION = 788;    private static final int REQUEST_READ_PHOTO_ID_PDF_PERMISSION = 789;    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;    private static final int REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE = 790;    private static final int REQUEST_READ_CERTIFICATE_PIC_PERMISSION = 791;    private static final int REQUEST_GOVTID_CAMERA_PERMISSION_CODE = 792;    private static final int REQUEST_READ_GOVTID_PIC_PERMISSION = 793;    private static final int REQUEST_PHOTOID_CAMERA_PERMISSION_CODE = 794;    private static final int REQUEST_READ_PHOTOID_PIC_PERMISSION = 795;    private static final int SELECT_CLINIC_CAMERA = 1000 ;    private static final int SELECT_CLINIC_PICTURE = 1001 ;    private static final int SELECT_CERT_PDF = 1002;    private static final int SELECT_GOVTID_PDF = 1003;    private static final int SELECT_PHOTOID_PDF = 1004;    private static final int SELECT_CERTIFICATE_CAMERA = 1005;    private static final int SELECT_CERTIFICATE_PICTURE = 1006;    private static final int SELECT_GOVTID_CAMERA = 1007;    private static final int SELECT_GOVTID_PICTURE = 1008;    private static final int SELECT_PHOTOID_CAMERA = 1009;    private static final int SELECT_PHOTOID_PICTURE = 1010;    String start_date,dr_title, dr_name,user_id,currentDateandTime,clinic_about_dr,clinic_dr_id,clinic_number;    private String getfromdate;    private static final int REQUEST_CHECK_SETTINGS_GPS = 0x1;    private GoogleApiClient googleApiClient;    Location mLastLocation;    public static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;    private SupportMapFragment mapFragment;    private double latitude;    private double longitude;    private List<DropDownListResponse.DataBean.CommunicationTypeBean> communicationtypList;    private String strcommunicationtype;    private List<DoctorDetailsByUserIdResponse.DataBean.ClinicPicBean> doctorclinicdetailsResponseList;    private List<DoctorDetailsByUserIdResponse.DataBean.EducationDetailsBean> education_detailsList;    private List<DoctorDetailsByUserIdResponse.DataBean.ExperienceDetailsBean> experience_detailsList;    private List<DoctorDetailsByUserIdResponse.DataBean.SpecializationBean> specialzationListEdit;    private List<DoctorDetailsByUserIdResponse.DataBean.PetHandledBean> pethandleListEdit;    private List<DoctorBusinessInfoUpdateRequest.EducationDetailsBean> education_details = new ArrayList<>();    private List<DoctorBusinessInfoUpdateRequest.ExperienceDetailsBean> experience_details = new ArrayList<>();    private List<DoctorBusinessInfoUpdateRequest.SpecializationBean> specialization  = new ArrayList<>();    private List<DoctorBusinessInfoUpdateRequest.PetHandledBean> pet_handled = new ArrayList<>();    private List<DoctorBusinessInfoUpdateRequest.ClinicPicBean> clinic_pic = new ArrayList<>();    private List<DoctorBusinessInfoUpdateRequest.CertificatePicBean> certificate_pic = new ArrayList<>();    private List<DoctorBusinessInfoUpdateRequest.GovtIdPicBean> govt_id_pic = new ArrayList<>();    private List<DoctorBusinessInfoUpdateRequest.PhotoIdPicBean> photo_id_pic = new ArrayList<>();    private Dialog alertDialog;    private List<DoctorDetailsByUserIdResponse.DataBean.ClinicPicBean> clinicPicBeansEdit;    private List<DoctorDetailsByUserIdResponse.DataBean.CertificatePicBean> certificatePicBeansEdit;    private List<DoctorDetailsByUserIdResponse.DataBean.GovtIdPicBean> govtIdPicBeansEdit;    private List<DoctorDetailsByUserIdResponse.DataBean.PhotoIdPicBean> photoIdPicBeansEdit;    private String id;    private String Dr_title,Dr_name;    private double Clinic_lat,Clinic_long;    private String Clinic_loc;    private String strMyImagePath;    private String latlng;    private String CityName;    private String AddressLine;    private boolean isSetAddress = false;    @SuppressLint("LogNotTimber")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_edit_doctor_business_info);        ButterKnife.bind(this);        SessionManager session = new SessionManager(getApplicationContext());        HashMap<String, String> user = session.getProfileDetails();        dr_name = user.get(SessionManager.KEY_FIRST_NAME);        user_id = user.get(SessionManager.KEY_ID);        dr_title = "Dr";        Log.w(TAG,"dr_name : "+dr_name+" dr_title : "+dr_title);        Bundle extras = getIntent().getExtras();        if (extras != null) {            latlng = String.valueOf(getIntent().getSerializableExtra("latlng"));            Log.w(TAG,"latlng-->"+ latlng);            if(latlng != null && !latlng.equalsIgnoreCase("null")){                String newString = latlng.replace("lat/lng:", "");                Log.w(TAG,"latlng=="+newString);                String latlngs = newString.trim().replaceAll("\\(", "").replaceAll("\\)","").trim();                Log.w(TAG,"latlngs=="+latlngs);                String[] separated = latlngs.split(",");                String lat = separated[0];                String lon = separated[1];                latitude = Double.parseDouble(lat);                longitude = Double.parseDouble(lon);            }            CityName = extras.getString("cityname");            AddressLine = extras.getString("address");            String postalCode = extras.getString("PostalCode");            Log.w(TAG,"Clinic_lat : "+Clinic_lat+" "+"Clinic_long : "+Clinic_long+" CityName : "+CityName+" AddressLine : "+AddressLine);            if(AddressLine != null) {                txt_clinic_addr.setText(AddressLine);                isSetAddress = true;            }        }        if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {            doctorDetailsByUserIdResponseCall();        }        if (mapFragment == null) {            mapFragment = SupportMapFragment.newInstance();            mapFragment.getMapAsync(this);        }        googleApiConnected();        LocationRequest locationRequest = LocationRequest.create();        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);        locationRequest.setInterval(1000); // 10 seconds        locationRequest.setFastestInterval(1000); // 5 seconds        avi_indicator.setVisibility(View.GONE);        buttonAddedu.setOnClickListener(this);        buttonAddexpr.setOnClickListener(this);        buttonsubmit.setOnClickListener(this);        edittext_from.setOnClickListener(this);        edittext_to.setOnClickListener(this);        edittext_education_year.setOnClickListener(this);        edtx_clinic_pic_choose.setOnClickListener(this);        edtx_cert_pic_choose.setOnClickListener(this);        edtx_govt_pic_choose.setOnClickListener(this);        edtx_photo_pic_choose.setOnClickListener(this);        img_bck.setOnClickListener(this);        txt_location_change.setOnClickListener(this);        /* ************ Adding Images ************** */        recylerView_choosen_clinic_images.setHasFixedSize(true);        recylerView_choosen_clinic_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager2 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_clinic_images.setLayoutManager(layoutManager2);        /* ************ Adding Certificate ************** */        recylerView_choosen_certificate_images.setHasFixedSize(true);        recylerView_choosen_certificate_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager3 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_certificate_images.setLayoutManager(layoutManager3);        /* ************ Adding GovtID ************** */        recylerView_choosen_govtid_images.setHasFixedSize(true);        recylerView_choosen_govtid_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager4 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_govtid_images.setLayoutManager(layoutManager4);        /* ************ Adding PhotoID ************** */        recylerView_choosen_photo_id_images.setHasFixedSize(true);        recylerView_choosen_photo_id_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager5 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_photo_id_images.setLayoutManager(layoutManager5);        /* *************** Get Current Date and Time ************************ */        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy hh:mm aa", Locale.getDefault());         currentDateandTime = sdf.format(new Date());        spr_communicationtype.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int arg2, long arg3) {                ((TextView) parent.getChildAt(0)).setTextColor(getResources().getColor(R.color.green));                 strcommunicationtype = spr_communicationtype.getSelectedItem().toString();                 Log.w(TAG,"communicationtype : "+strcommunicationtype);            }            @Override            public void onNothingSelected(AdapterView<?> arg0) {                // TODO Auto-generated method stub            }        });        mSignaturePad.setOnSignedListener(new SignaturePad.OnSignedListener() {            @Override            public void onStartSigning() {                //Toast.makeText(EditDoctorBusinessInfoActivity.this, "OnStartSigning", Toast.LENGTH_SHORT).show();            }            @Override            public void onSigned() {                mSaveButton.setEnabled(true);                mClearButton.setEnabled(true);            }            @Override            public void onClear() {                mSaveButton.setEnabled(false);                mClearButton.setEnabled(false);            }        });        mClearButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                mSignaturePad.clear();            }        });        mSaveButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Bitmap signatureBitmap = mSignaturePad.getSignatureBitmap();                Log.w(TAG,"signatureBitmap"+signatureBitmap);                // Bitmap getTransparentSignatureBitmap = mSignaturePad.getTransparentSignatureBitmap();                // Log.w(TAG,"getTransparentSignatureBitmap"+getTransparentSignatureBitmap);                // Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get("data");                File file = new File(getFilesDir(), "DoctorSignature" + ".jpg");                OutputStream os;                try {                    os = new FileOutputStream(file);                    if (signatureBitmap != null) {                        signatureBitmap.compress(Bitmap.CompressFormat.JPEG, 100, os);                    }                    os.flush();                    os.close();                } catch (Exception e) {                    Log.e(getClass().getSimpleName(), "Error writing bitmap", e);                }                RequestBody requestFile = RequestBody.create(MediaType.parse("image*/"), file);                siganaturePart = MultipartBody.Part.createFormData("sampleFile",  user_id+currentDateandTime+file.getName(), requestFile);                uploadDigitalSignatureImageRequest();/*                if (addJpgSignatureToGallery(signatureBitmap)) {                    //Toast.makeText(Doctor_Profile_Activity.this, "Signature saved into the Gallery", Toast.LENGTH_SHORT).show();                } else {                   // Toast.makeText(Doctor_Profile_Activity.this, "Unable to store the signature", Toast.LENGTH_SHORT).show();                }*/            }        });        llheaderdigitalsignature.setVisibility(View.GONE);        lldigitalsignature.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                llheaderdigitalsignature.setVisibility(View.VISIBLE);            }        });    }    @SuppressLint("LogNotTimber")    public void dropDownListResponseCall(){        avi_indicator.setVisibility(View.VISIBLE);        avi_indicator.smoothToShow();        //Creating an object of our api interface        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);        Call<DropDownListResponse> call = apiInterface.dropDownListResponseCall(RestUtils.getContentType());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<DropDownListResponse>() {            @Override            public void onResponse(@NonNull Call<DropDownListResponse> call, @NonNull Response<DropDownListResponse> response) {                avi_indicator.smoothToHide();                if (response.body() != null) {                    if(200 == response.body().getCode()){                        Log.w(TAG,"DropDownListResponse" + new Gson().toJson(response.body()));                        if(response.body().getData().getPet_handle() != null) {                            pethandleList = response.body().getData().getPet_handle();                        }                        if(response.body().getData().getSpecialzation() != null) {                            petSpecilaziationList = response.body().getData().getSpecialzation();                        }                        if(response.body().getData().getCommunication_type() != null) {                            communicationtypList = response.body().getData().getCommunication_type();                        }                        if(communicationtypList != null && communicationtypList.size()>0){                            setCommunicationtype(communicationtypList);                        }                        if(specialzationListEdit != null && specialzationListEdit.size()>0 && petSpecilaziationList != null && petSpecilaziationList.size()>0){                            for(int i=0;i<specialzationListEdit.size();i++){                                for(int j=0; j<petSpecilaziationList.size();j++){                                    if(specialzationListEdit.get(i).getSpecialization().equalsIgnoreCase(petSpecilaziationList.get(j).getSpecialzation())){                                        DoctorBusinessInfoUpdateRequest.SpecializationBean specializationBean = new DoctorBusinessInfoUpdateRequest.SpecializationBean();                                        specializationBean.setSpecialization(petSpecilaziationList.get(j).getSpecialzation());                                        specialization.add(specializationBean);                                    }                                }                            }                        }                        if(pethandleListEdit != null && pethandleListEdit.size()>0 && pethandleList != null && pethandleList.size()>0) {                            for (int i = 0; i < pethandleListEdit.size(); i++) {                            for (int j = 0; j < pethandleList.size(); j++) {                                if (pethandleListEdit.get(i).getPet_handled().equalsIgnoreCase(pethandleList.get(j).getPet_handle())) {                                    DoctorBusinessInfoUpdateRequest.PetHandledBean petHandledBean = new DoctorBusinessInfoUpdateRequest.PetHandledBean();                                    petHandledBean.setPet_handled(pethandleList.get(j).getPet_handle());                                    pet_handled.add(petHandledBean);                                }                            }                        }                        }                        Log.w(TAG,"petSpecilaziationList : "+new Gson().toJson(petSpecilaziationList));                        if(petSpecilaziationList != null && petSpecilaziationList.size()>0){                            setSpecList(petSpecilaziationList,specialzationListEdit);                        }                        if(pethandleList != null && pethandleList.size()>0){                            setPetHandle(pethandleList,pethandleListEdit);                        }                    }                }            }            @Override            public void onFailure(@NonNull Call<DropDownListResponse> call, @NonNull  Throwable t) {                avi_indicator.smoothToHide();                Log.w(TAG,"DropDownListResponse flr"+t.getMessage());            }        });    }    private void setCommunicationtype(List<DropDownListResponse.DataBean.CommunicationTypeBean> communicationtypList) {        ArrayList<String> pettypeArrayList = new ArrayList<>();        pettypeArrayList.add("Select Communication Type");        for (int i = 0; i < communicationtypList.size(); i++) {            String petType = communicationtypList.get(i).getCom_type();            hashMap_Communicationvalue.put(communicationtypList.get(i).getValue(), communicationtypList.get(i).getCom_type());            Log.w(TAG,"Communication Type-->"+petType);            pettypeArrayList.add(petType);            ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(EditDoctorBusinessInfoActivity.this, R.layout.spinner_item, pettypeArrayList);            spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner_item); // The drop down view            spr_communicationtype.setAdapter(spinnerArrayAdapter);            if (strcommunicationtype != null) {                int spinnerPosition = spinnerArrayAdapter.getPosition(strcommunicationtype);                spr_communicationtype.setSelection(spinnerPosition);            }        }    }    private void setPetHandle(List<DropDownListResponse.DataBean.PetHandleBean> petHandle, List<DoctorDetailsByUserIdResponse.DataBean.PetHandledBean> pethandleListEdit) {        recylerView_pettypelist.setLayoutManager(new GridLayoutManager(this, 2));        recylerView_pettypelist.setItemAnimator(new DefaultItemAnimator());        petsHandledListEditAdapter = new PetsHandledListEditAdapter(getApplicationContext(), petHandle,pethandleListEdit,this);        recylerView_pettypelist.setAdapter(petsHandledListEditAdapter);    }    private void setSpecList(List<DropDownListResponse.DataBean.SpecialzationBean> petSpecilaziationList, List<DoctorDetailsByUserIdResponse.DataBean.SpecializationBean> specialzationListEdit) {        recylerView_specializationlist.setLayoutManager(new GridLayoutManager(this, 2));        recylerView_specializationlist.setItemAnimator(new DefaultItemAnimator());        DoctorSpecialzationListAdapter doctorSpecialzationListAdapter = new DoctorSpecialzationListAdapter(getApplicationContext(), petSpecilaziationList,specialzationListEdit,this);        recylerView_specializationlist.setAdapter(doctorSpecialzationListAdapter);    }    private void getEndDate(){        String[] getfrom = getfromdate.split("-");        Log.w("split_date", Arrays.toString(getfrom));        int year,month,day;        year= Integer.parseInt(getfrom[0]);        month = Integer.parseInt(getfrom[1]);        int month1 = month -1 ;        day = Integer.parseInt(getfrom[2]);        Calendar c = Calendar.getInstance();        c.set(year,month1,day+1);        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                (view, year1, month2, dayOfMonth) -> {                    //String date = year1 + "-" + (month2 + 1) + "-" + dayOfMonth;                    String date = year1+"";                    setEndDate(date);                },        year,        month1,        day);        datePickerDialog.getDatePicker().setMinDate(c.getTimeInMillis());        datePickerDialog.getDatePicker().setMaxDate(new Date().getTime());        datePickerDialog.show();    }    private void setEndDate(String date) {        edittext_to.setText(date.trim());    }    private void getStartDate() {        Calendar c = Calendar.getInstance();        int mYear = c.get(Calendar.YEAR);        int mMonth = c.get(Calendar.MONTH);        int mDay = c.get(Calendar.DAY_OF_MONTH);        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                (view, year, monthOfYear, dayOfMonth) -> {                    getfromdate = year + "-" + (monthOfYear + 1) + "-" + dayOfMonth;                  start_date = year+"";                  setStartDate(start_date);                }, mYear, mMonth, mDay);        datePickerDialog.getDatePicker().setMaxDate(System.currentTimeMillis());        datePickerDialog.show();    }    private void setStartDate(String date) {        edittext_from.setText(date.trim());    }    private void getEduYear() {        // Get Current Date        final Calendar c = Calendar.getInstance();        int mYear = c.get(Calendar.YEAR);        int mMonth = c.get(Calendar.MONTH);        int mDay = c.get(Calendar.DAY_OF_MONTH);        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                (view, year, monthOfYear, dayOfMonth) -> {                    String  date = String.valueOf(year);                    setEduYr(date);                }, mYear, mMonth, mDay);        datePickerDialog.getDatePicker().setMaxDate(System.currentTimeMillis());        datePickerDialog.show();    }    private void setEduYr(String date) {        edittext_education_year.setText(date);    }    private void addExpr() {        cmpynm = edittext_company_name.getText().toString().trim();        from = edittext_from.getText().toString().trim();        to = edittext_to.getText().toString().trim();        int cmpynmlength = cmpynm.trim().length();        if(cmpynm.isEmpty()){            // edittext_company_name.setError("Please fill the Company name");            Toasty.warning(getApplicationContext(), "Please fill the Company name", Toast.LENGTH_SHORT).show();        }        else if(from.isEmpty()){            //txt_edu_yr.setError("Please fill the Start Date");            Toasty.warning(getApplicationContext(), "Please fill the experience from year", Toast.LENGTH_SHORT).show();        }        else if(to.isEmpty()){            //txt_edu_yr.setError("Please fill the End Date");            Toasty.warning(getApplicationContext(), "Please fill the experience to year", Toast.LENGTH_SHORT).show();        }        else if(cmpynmlength>25){            //edittext_company_name.setError("The maximum length for an Company name is 25 characters ");            Toasty.warning(getApplicationContext(), "The maximum length for an Company name is 25 characters", Toast.LENGTH_SHORT).show();        }        else{            insertExpr(cmpynm,from,to);            edittext_company_name.setText("");            edittext_from.setText("");            edittext_to.setText("");            int start,end,yearsofexp =0;            start = Integer.parseInt(from);            end = Integer.parseInt(to);            yearsofexp = end-start;            if(yearsofexp == 0){                yearsofexp = 1;            }            DoctorBusinessInfoUpdateRequest.ExperienceDetailsBean experienceDetailsBean1 = new DoctorBusinessInfoUpdateRequest.ExperienceDetailsBean();            experienceDetailsBean1.setCompany(cmpynm);            experienceDetailsBean1.setFrom(from);            experienceDetailsBean1.setTo(to);            experienceDetailsBean1.setYearsofexperience(yearsofexp);            experience_details.add(experienceDetailsBean1);        }    }    private void insertExpr(String cmpynm, String from, String to) {        if(experience_detailsList.size()>=3){            Toasty.warning(getApplicationContext(),"Sorry you cannot add more than 3",Toast.LENGTH_SHORT).show();        }        else {            Toasty.success(getApplicationContext(),"Experience added successfully",Toast.LENGTH_SHORT).show();            DoctorDetailsByUserIdResponse.DataBean.ExperienceDetailsBean experienceDetailsBean = new DoctorDetailsByUserIdResponse.DataBean.ExperienceDetailsBean();            experienceDetailsBean.setCompany(cmpynm);            experienceDetailsBean.setFrom(from);            experienceDetailsBean.setTo(to);            experience_detailsList.add(experienceDetailsBean);            setDoctorExperience(experience_detailsList);        }    }    private void addEduc() {        education_name = edittext_education_name.getText().toString().trim();        education_yr = edittext_education_year.getText().toString().trim();        int edunmlength = education_name.trim().length();        int eduyrlength = education_yr.trim().length();        if(education_name.isEmpty()){           /* edittext_education_name.setError("Please fill the Education name");            edittext_education_name.requestFocus();*/            Toasty.warning(getApplicationContext(),"Please fill the Education name",Toast.LENGTH_SHORT).show();        }        else if(education_yr.isEmpty()){           /* txt_edu_yr.setError("Please fill the Education year");            txt_edu_yr.setFocusableInTouchMode(true);            txt_edu_yr.requestFocus();*/            Toasty.warning(getApplicationContext(),"Please fill the Education year",Toast.LENGTH_SHORT).show();        }        else if(edunmlength>25){            Toasty.warning(getApplicationContext(),"The maximum length for an Education name is 25 characters",Toast.LENGTH_SHORT).show();            /*edittext_education_name.setError("The maximum length for an Education name is 25 characters ");            edittext_education_name.requestFocus();*/        }        else if(eduyrlength>25){            Toasty.warning(getApplicationContext(),"The maximum length for an Education year is 25 characters",Toast.LENGTH_SHORT).show();          /*  txt_edu_yr.setError("The maximum length for an Education year is 25 characters ");            txt_edu_yr.requestFocus();*/        }        else{            insertEdu(education_name,education_yr);            edittext_education_name.setText("");            edittext_education_year.setText("");            DoctorBusinessInfoUpdateRequest.EducationDetailsBean educationDetailsBean = new DoctorBusinessInfoUpdateRequest.EducationDetailsBean();            educationDetailsBean.setEducation(education_name);            educationDetailsBean.setYear(education_yr);            education_details.add(educationDetailsBean);        }    }    private void insertEdu(String education_name, String education_yr) {        if(education_detailsList.size()>=3){            Toasty.warning(getApplicationContext(),"Sorry you cannot add more than 3",Toast.LENGTH_SHORT).show();        } else {            Toasty.success(getApplicationContext(),"Eductation added successfully",Toast.LENGTH_SHORT).show();            DoctorDetailsByUserIdResponse.DataBean.EducationDetailsBean educationDetailsBean = new DoctorDetailsByUserIdResponse.DataBean.EducationDetailsBean();            educationDetailsBean.setEducation(education_name);            educationDetailsBean.setYear(education_yr);            education_detailsList.add(educationDetailsBean);            setDoctorEducations(education_detailsList);        }    }    @SuppressLint({"LongLogTag", "LogNotTimber"})    @Override    public void onItemDrSpecialzationCheck(int position, String specValue) {        Log.w(TAG,"onItemSPSpecialzationCheck specValue : "+specValue);        DropDownListResponse.DataBean.SpecialzationBean specialzationBean = new DropDownListResponse.DataBean.SpecialzationBean();        specialzationBean.setSpecialzation(specValue);        petSpecilaziationList.add(specialzationBean);        DoctorBusinessInfoUpdateRequest.SpecializationBean specializationBean = new DoctorBusinessInfoUpdateRequest.SpecializationBean();        specializationBean.setSpecialization(specValue);        specialization.add(specializationBean);        Log.w(TAG + "added_specialzation_list",new Gson().toJson(specialization));    }    @SuppressLint("LogNotTimber")    @Override    public void onItemDrSpecialzationUnCheck(int position, String specValue) {        if(specValue != null){            if(specialization != null){                for (int i = 0; i < specialization.size(); i++)                    if (specialization.get(i).getSpecialization().equalsIgnoreCase(specValue)) {                        specialization.remove(i);                        Log.w(TAG, "after removing list if" + new Gson().toJson(specialization));                    }            }        }    }    @SuppressLint("LongLogTag")    @Override    public void onItemPetCheck(int position, String pethandleValue) {        Log.w(TAG,"onItemPetCheck pethandleValue : "+pethandleValue);        DropDownListResponse.DataBean.PetHandleBean petHandleBean = new DropDownListResponse.DataBean.PetHandleBean();        petHandleBean.setPet_handle(pethandleValue);        pethandleList.add(petHandleBean);        DoctorBusinessInfoUpdateRequest.PetHandledBean petHandledBean1 = new DoctorBusinessInfoUpdateRequest.PetHandledBean();        petHandledBean1.setPet_handled(pethandleValue);        pet_handled.add(petHandledBean1);        Log.w(TAG + "added_pethandled_list",new Gson().toJson(pet_handled));    }    @Override    public void onItemPetUnCheck(int position, String pethandleValue) {        if(pethandleValue != null){            if(pet_handled != null){                for (int i = 0; i < pet_handled.size(); i++)                    if (pet_handled.get(i).getPet_handled().equalsIgnoreCase(pethandleValue)) {                        pet_handled.remove(i);                        Log.w(TAG, "after removing list if" + new Gson().toJson(pet_handled));                    }            }        }    }    private void chooseClinicImage() {        if(clinic_pic.size()>=1){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 1", Toast.LENGTH_SHORT).show();        }        else        {            final CharSequence[] items = {"Take Photo", "Choose from Library", "Cancel"};            //AlertDialog.Builder alert=new AlertDialog.Builder(this);            AlertDialog.Builder builder = new AlertDialog.Builder(EditDoctorBusinessInfoActivity.this);            builder.setTitle("Choose option");            builder.setItems(items, (dialog, item) -> {                if (items[item].equals("Take Photo"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);                    }                    else                    {                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);                    }                }                else if (items[item].equals("Choose from Library"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorBusinessInfoActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);                    }                    else{                        Intent intent = new Intent();                        intent.setType("image/*");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_CLINIC_PICTURE);                    }                }                else if (items[item].equals("Cancel")) {                    dialog.dismiss();                }            });            builder.show();        }    }    private void uploadClinicImage() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"Profpic"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        DoctorBusinessInfoUpdateRequest.ClinicPicBean clinicPicBean = new DoctorBusinessInfoUpdateRequest.ClinicPicBean();                        clinicPicBean.setClinic_pic(response.body().getData());                        clinic_pic.add(clinicPicBean);                        DoctorDetailsByUserIdResponse.DataBean.ClinicPicBean clinicPicBean1 = new DoctorDetailsByUserIdResponse.DataBean.ClinicPicBean();                        clinicPicBean1.setClinic_pic(response.body().getData());                        clinicPicBeansEdit.add(clinicPicBean1);                        doctorEditClinicImageListAdapter = new DoctorEditClinicImageListAdapter(getApplicationContext(), clinicPicBeansEdit,clinic_pic);                        recylerView_choosen_clinic_images.setAdapter(doctorEditClinicImageListAdapter);                    }                }            }            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    private void chooseCertPdf() {        if(certificatePicResponse.size()>=1){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 1", Toast.LENGTH_SHORT).show();        }        else {            final CharSequence[] items = {"Take Photo", "Pick from Galley", "Select File","Cancel"};            //AlertDialog.Builder alert=new AlertDialog.Builder(this);            AlertDialog.Builder builder = new AlertDialog.Builder(EditDoctorBusinessInfoActivity.this);            builder.setTitle("Choose option");            builder.setItems(items, (dialog, item) -> {                if (items[item].equals("Take Photo"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);                    }                    else                    {                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                        startActivityForResult(intent, SELECT_CERTIFICATE_CAMERA);                    }                }                else if (items[item].equals("Pick from Galley"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);                    }                    else{                        Intent intent = new Intent();                        intent.setType("image/*");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_CERTIFICATE_PICTURE);                    }                }                else if (items[item].equals("Select File")){                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);                    }                    else{                        Intent intent = new Intent();                        intent.setType("application/pdf");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_CERT_PDF);                    }                }                else if (items[item].equals("Cancel")) {                    dialog.dismiss();                }            });            builder.show();        }    }    private void uploadCertPdf() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(certPart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"PdfFileLink"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        DoctorBusinessInfoUpdateRequest.CertificatePicBean certificatePicBean = new DoctorBusinessInfoUpdateRequest.CertificatePicBean();                        certificatePicBean.setCertificate_pic(response.body().getData());                        certificate_pic.add(certificatePicBean);                        DoctorDetailsByUserIdResponse.DataBean.CertificatePicBean certificatePicBean1 = new DoctorDetailsByUserIdResponse.DataBean.CertificatePicBean();                        certificatePicBean1.setCertificate_pic(response.body().getData());                        certificatePicBeansEdit.add(certificatePicBean1);                        doctorEditCertificateListAdapter = new DoctorEditCertificateListAdapter(getApplicationContext(), certificatePicBeansEdit,certificate_pic);                        recylerView_choosen_certificate_images.setAdapter(doctorEditCertificateListAdapter);                    }                }            }            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    private void chooseGovIDPdf() {        if(govtIdPicResponse.size()>=1){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 1", Toast.LENGTH_SHORT).show();        }        else {            final CharSequence[] items = {"Take Photo", "Pick from Galley", "Select File","Cancel"};            //AlertDialog.Builder alert=new AlertDialog.Builder(this);            AlertDialog.Builder builder = new AlertDialog.Builder(EditDoctorBusinessInfoActivity.this);            builder.setTitle("Choose option");            builder.setItems(items, (dialog, item) -> {                if (items[item].equals("Take Photo"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);                    }                    else                    {                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                        startActivityForResult(intent, SELECT_GOVTID_CAMERA);                    }                }                else if (items[item].equals("Pick from Galley"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);                    }                    else{                        Intent intent = new Intent();                        intent.setType("image/*");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_GOVTID_PICTURE);                    }                }                else if (items[item].equals("Select File")){                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);                    }                    else{                        Intent intent = new Intent();                        intent.setType("application/pdf");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_GOVTID_PDF);                    }                }                else if (items[item].equals("Cancel")) {                    dialog.dismiss();                }            });            builder.show();        }    }    @SuppressLint("LogNotTimber")    private void uploadGovtIDPdf() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(govIdPart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"PdfFileLink"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        DoctorBusinessInfoUpdateRequest.GovtIdPicBean govtIdPicBean = new DoctorBusinessInfoUpdateRequest.GovtIdPicBean();                        govtIdPicBean.setGovt_id_pic(response.body().getData());                        govt_id_pic.add(govtIdPicBean);                        DoctorDetailsByUserIdResponse.DataBean.GovtIdPicBean govtIdPicBean1 = new DoctorDetailsByUserIdResponse.DataBean.GovtIdPicBean();                        govtIdPicBean1.setGovt_id_pic(response.body().getData());                        govtIdPicBeansEdit.add(govtIdPicBean1);                        doctorEditGovtIDListAdapter = new DoctorEditGovtIDListAdapter(getApplicationContext(), govtIdPicBeansEdit,govt_id_pic);                        recylerView_choosen_govtid_images.setAdapter(doctorEditGovtIDListAdapter);                    }                }            }            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    private void choosePhotoIDPdf() {        if(photoIdPicResponse.size()>=1){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 1", Toast.LENGTH_SHORT).show();        }        else {            final CharSequence[] items = {"Take Photo", "Pick from Galley", "Select File","Cancel"};            //AlertDialog.Builder alert=new AlertDialog.Builder(this);            AlertDialog.Builder builder = new AlertDialog.Builder(EditDoctorBusinessInfoActivity.this);            builder.setTitle("Choose option");            builder.setItems(items, (dialog, item) -> {                if (items[item].equals("Take Photo"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);                    }                    else                    {                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                        startActivityForResult(intent, SELECT_PHOTOID_CAMERA);                    }                }                else if (items[item].equals("Pick from Galley"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);                    }                    else{                        Intent intent = new Intent();                        intent.setType("image/*");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_PHOTOID_PICTURE);                    }                }                else if (items[item].equals("Select File")){                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);                    }                    else{                        Intent intent = new Intent();                        intent.setType("application/pdf");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_PHOTOID_PDF);                    }                }                else if (items[item].equals("Cancel")) {                    dialog.dismiss();                }            });            builder.show();        }    }    private void uploadPhotoIDPdf() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(photIDPart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"PdfFileLink"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        DoctorBusinessInfoUpdateRequest.PhotoIdPicBean photoIdPicBean = new DoctorBusinessInfoUpdateRequest.PhotoIdPicBean();                        photoIdPicBean.setPhoto_id_pic(response.body().getData());                        photo_id_pic.add(photoIdPicBean);                        DoctorDetailsByUserIdResponse.DataBean.PhotoIdPicBean photoIdPicBean1 = new DoctorDetailsByUserIdResponse.DataBean.PhotoIdPicBean();                        photoIdPicBean1.setPhoto_id_pic(response.body().getData());                        photoIdPicBeansEdit.add(photoIdPicBean1);                        doctorEditPhotoIDListAdapter = new DoctorEditPhotoIDListAdapter(getApplicationContext(), photoIdPicBeansEdit,photo_id_pic);                        recylerView_choosen_photo_id_images.setAdapter(doctorEditPhotoIDListAdapter);                    }                }            }            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    private void checkValidation() {        if (ContextCompat.checkSelfPermission(this,                Manifest.permission.ACCESS_FINE_LOCATION)                != PackageManager.PERMISSION_GRANTED) {            ActivityCompat.requestPermissions(this,                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},                    MY_PERMISSIONS_REQUEST_LOCATION);        }        else {                clinic_name = edittext_clinic_name.getText().toString().trim();                clinic_addr = txt_clinic_addr.getText().toString().trim();            clinic_dr_id = edtx_doctor_id.getText().toString().trim();            clinic_about_dr = edtx_about_doctor.getText().toString().trim();            clinic_number = edtx_clinic_number.getText().toString().trim();                int clnnmlength = clinic_name.trim().length();                int clncaddrlength = clinic_addr.trim().length();            int clncnumlength = clinic_number.trim().length();            int clncdrIDlength = clinic_dr_id.trim().length();            int clncabtdrlength = clinic_about_dr.trim().length();                boolean can_proceed = true;                if(clinic_name.isEmpty()){                    edittext_clinic_name.setError("Please fill the clinic name");                    edittext_clinic_name.requestFocus();                   // Toasty.warning(getApplicationContext(), "Please Enter the clinic name", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(clnnmlength>25){                    edittext_education_name.setError("The maximum length for an Clinic name is 25 characters ");                    edittext_education_name.requestFocus();                    can_proceed = false;                }                else if(!validdCommunicationType()){                }                else if(education_detailsList.size()<1){                    Toasty.warning(getApplicationContext(),"Please Add minimum 1 Education",Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(experience_detailsList.size()<1){                    Toasty.warning(getApplicationContext(),"Please Add minimum 1 Experience",Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(specialization.size()<1){                    Toasty.warning(getApplicationContext(),"Please Choose minimum 1 Specialization",Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(clinic_dr_id.isEmpty()){                    edtx_doctor_id.setError("Please fill the doctor id");                    edtx_doctor_id.requestFocus();                    // Toasty.warning(getApplicationContext(), "Please Enter the clinic name", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(clncdrIDlength>25){                    edtx_doctor_id.setError("The maximum length for an Clinic ID is 25 characters ");                    edtx_doctor_id.requestFocus();                    can_proceed = false;                }                else if(clinic_number.isEmpty()){                    edtx_clinic_number.setError("Please fill the clinic number");                    edtx_clinic_number.requestFocus();                    // Toasty.warning(getApplicationContext(), "Please Enter the clinic name", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(clncnumlength>25){                    edtx_clinic_number.setError("The maximum length for an Clinic Number is 25 characters ");                    edtx_clinic_number.requestFocus();                    can_proceed = false;                }                else if(clinic_about_dr.isEmpty()){                    edtx_about_doctor.setError("Please fill the about doctor");                    edtx_about_doctor.requestFocus();                    // Toasty.warning(getApplicationContext(), "Please Enter the clinic name", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(clncabtdrlength>252){                    edtx_about_doctor.setError("The maximum length for an About Doctor is 252 characters ");                    edtx_about_doctor.requestFocus();                    can_proceed = false;                }                else if(pet_handled.size()<1){                    Toasty.warning(getApplicationContext(),"Please Choose minimum 1 pet handle",Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(txt_clinic_addr.getText().toString() != null && txt_clinic_addr.getText().toString().isEmpty()){                    txt_clinic_addr.setError("Please fill the clinic address");                    txt_clinic_addr.requestFocus();                   // Toasty.warning(getApplicationContext(), "Please Enter the clinic address", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(clncaddrlength>252){                    edittext_education_name.setError("The maximum length for an Clinic Address is 252 characters ");                    edittext_education_name.requestFocus();                }                else if(clinic_pic.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose minimum 1 Clinic Image", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(certificate_pic.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose Certificate File", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(govt_id_pic.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose GovtID File", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(photo_id_pic.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose PhotoID File", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }else if(edtx_service_charge_amount.getText().toString().isEmpty()){                    edtx_service_charge_amount.setError("Please fill the service charge amount");                    edtx_service_charge_amount.requestFocus();                    can_proceed = false;                }                else if (digitalSignatureServerUrlImagePath.isEmpty()) {                    showErrorLoading("Please draw your signature");                    can_proceed = false;                }                if(can_proceed){                    if(validdCommunicationType()){                        consultancy_fees = Integer.parseInt(edtx_service_charge_amount.getText().toString().trim());                        if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {                            doctorBusinessInfoUpdateResponseCall();                        }                    }                }        }    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        switch (requestCode) {            case REQUEST_CHECK_SETTINGS_GPS:                switch (resultCode) {                    case Activity.RESULT_OK:                        getMyLocation();                        break;                    case Activity.RESULT_CANCELED:                        getMyLocation();                        break;                }                break;        }        //	Toast.makeText(getActivity(),"kk",Toast.LENGTH_SHORT).show();        if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA)        {            if(requestCode == SELECT_CLINIC_CAMERA)            {                Bitmap photo = (Bitmap) data.getExtras().get("data");                File file = new File(getFilesDir(), "Petfolio1" + ".jpg");                OutputStream os;                try {                    os = new FileOutputStream(file);                    photo.compress(Bitmap.CompressFormat.JPEG, 100, os);                    os.flush();                    os.close();                } catch (Exception e) {                    Log.e(getClass().getSimpleName(), "Error writing bitmap", e);                }                RequestBody requestFile = RequestBody.create(MediaType.parse("image*/"), file);                filePart = MultipartBody.Part.createFormData("sampleFile",  user_id+currentDateandTime+file.getName(), requestFile);                uploadClinicImage();            }            else{                try {                    if (resultCode == Activity.RESULT_OK)                    {                        Log.w("VALUEEEEEEE1111", " " + data);                        Uri selectedImageUri = data.getData();                        Log.w("selectedImageUri", " " + selectedImageUri);                        String filename = getFileName(selectedImageUri);                        Log.w("filename", " " + filename);                        String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedImageUri);                        assert filePath != null;                        File file = new File(filePath); // initialize file here                        long length = file.length() / 1024; // Size in KB                        Log.w("filesize", " " + length);//                        if(length>200){////                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                                    .setTitleText("File Size")//                                    .setContentText("Plz choose file size less than 200 kb ")//                                    .setConfirmText("Ok")//                                    .show();//                        }////                        else{                            filePart = MultipartBody.Part.createFormData("sampleFile", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse("image/*"), file));                            uploadClinicImage();                        //}                    }                } catch (Exception e) {                    Log.w("Exception", " " + e);                }            }        }        else if(requestCode == SELECT_CERTIFICATE_CAMERA)        {            Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get("data");            File file = new File(getFilesDir(), "Petfolio1" + ".jpg");            OutputStream os;            try {                os = new FileOutputStream(file);                if (photo != null) {                    photo.compress(Bitmap.CompressFormat.JPEG, 100, os);                }                os.flush();                os.close();            } catch (Exception e) {                Log.e(getClass().getSimpleName(), "Error writing bitmap", e);            }            RequestBody requestFile = RequestBody.create(MediaType.parse("image*/"), file);            certPart = MultipartBody.Part.createFormData("sampleFile",  user_id+currentDateandTime+file.getName(), requestFile);            uploadCertPdf();        }        else if(requestCode == SELECT_CERTIFICATE_PICTURE){            try {                if (resultCode == Activity.RESULT_OK) {                    Log.w("VALUEEEEEEE1111", " " + data);                    Uri selectedImageUri = data.getData();                    Log.w("selectedImageUri", " " + selectedImageUri);                    String filename = null;                    if (selectedImageUri != null) {                        filename = getFileName(selectedImageUri);                    }                    Log.w("filename", " " + filename);                    String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedImageUri);                    assert filePath != null;                    File file = new File(filePath); // initialize file here                    long length = file.length() / 1024; // Size in KB                    Log.w("filesize", " " + length);                    certPart = MultipartBody.Part.createFormData("sampleFile", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse("image/*"), file));                    uploadCertPdf();                }            } catch (Exception e) {                Log.w("Exception", " " + e);            }        }        else if(requestCode== SELECT_CERT_PDF){            try {                if (resultCode == Activity.RESULT_OK)                {                    Log.w("URI", " " + data);                    Uri selectedFileUri = data.getData();                    Log.w("selectedFileUri", " " + selectedFileUri);                    String filename = getFileName(selectedFileUri);                    Log.w("filename", " " + filename);                    String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedFileUri);                    assert filePath != null;                    File file = new File(filePath); // initialize file here                    long length = file.length() / 1024; // Size in KB                    Log.w("filesize", " " + length);//                    if(length>200){////                        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                                .setTitleText("File Size")//                                .setContentText("Plz choose file size less than 200 kb ")//                                .setConfirmText("Ok")//                                .show();//                    }////                    else{                    certPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("pdf/*"), file));                    uploadCertPdf();//                    }                }            } catch (Exception e) {                Log.w("Exception", " " + e);            }        }        else if(requestCode == SELECT_GOVTID_CAMERA)        {            Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get("data");            File file = new File(getFilesDir(), "Petfolio1" + ".jpg");            OutputStream os;            try {                os = new FileOutputStream(file);                if (photo != null) {                    photo.compress(Bitmap.CompressFormat.JPEG, 100, os);                }                os.flush();                os.close();            } catch (Exception e) {                Log.e(getClass().getSimpleName(), "Error writing bitmap", e);            }            RequestBody requestFile = RequestBody.create(MediaType.parse("image*/"), file);            govIdPart = MultipartBody.Part.createFormData("sampleFile",  user_id+currentDateandTime+file.getName(), requestFile);            uploadGovtIDPdf();        }        else if(requestCode == SELECT_GOVTID_PICTURE){            try {                if (resultCode == Activity.RESULT_OK) {                    Log.w("VALUEEEEEEE1111", " " + data);                    Uri selectedImageUri = data.getData();                    Log.w("selectedImageUri", " " + selectedImageUri);                    String filename = null;                    if (selectedImageUri != null) {                        filename = getFileName(selectedImageUri);                    }                    Log.w("filename", " " + filename);                    String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedImageUri);                    assert filePath != null;                    File file = new File(filePath); // initialize file here                    long length = file.length() / 1024; // Size in KB                    Log.w("filesize", " " + length);                    govIdPart = MultipartBody.Part.createFormData("sampleFile", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse("image/*"), file));                    uploadGovtIDPdf();                }            } catch (Exception e) {                Log.w("Exception", " " + e);            }        }        else if(requestCode== SELECT_GOVTID_PDF){            try {                if (resultCode == Activity.RESULT_OK)                {                    Log.w("URI", " " + data);                    Uri selectedFileUri = data.getData();                    Log.w("selectedFileUri", " " + selectedFileUri);                    String filename = getFileName(selectedFileUri);                    Log.w("filename", " " + filename);                    String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedFileUri);                    assert filePath != null;                    File file = new File(filePath); // initialize file here                    long length = file.length() / 1024; // Size in KB                    Log.w("filesize", " " + length);//                    if(length>200){////                        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                                .setTitleText("File Size")//                                .setContentText("Plz choose file size less than 200 kb ")//                                .setConfirmText("Ok")//                                .show();//                    }////                    else{                    govIdPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("pdf/*"), file));                    uploadGovtIDPdf();                    //}                }            } catch (Exception e) {                Log.w("Exception", " " + e);            }        }        else if(requestCode == SELECT_PHOTOID_CAMERA)        {            Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get("data");            File file = new File(getFilesDir(), "Petfolio1" + ".jpg");            OutputStream os;            try {                os = new FileOutputStream(file);                if (photo != null) {                    photo.compress(Bitmap.CompressFormat.JPEG, 100, os);                }                os.flush();                os.close();            } catch (Exception e) {                Log.e(getClass().getSimpleName(), "Error writing bitmap", e);            }            RequestBody requestFile = RequestBody.create(MediaType.parse("image*/"), file);            photIDPart = MultipartBody.Part.createFormData("sampleFile",  user_id+currentDateandTime+file.getName(), requestFile);            uploadPhotoIDPdf();        }        else if(requestCode == SELECT_PHOTOID_PICTURE){            try {                if (resultCode == Activity.RESULT_OK) {                    Log.w("VALUEEEEEEE1111", " " + data);                    Uri selectedImageUri = data.getData();                    Log.w("selectedImageUri", " " + selectedImageUri);                    String filename = null;                    if (selectedImageUri != null) {                        filename = getFileName(selectedImageUri);                    }                    Log.w("filename", " " + filename);                    String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedImageUri);                    assert filePath != null;                    File file = new File(filePath); // initialize file here                    long length = file.length() / 1024; // Size in KB                    Log.w("filesize", " " + length);                    photIDPart = MultipartBody.Part.createFormData("sampleFile", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse("image/*"), file));                    uploadPhotoIDPdf();                }            } catch (Exception e) {                Log.w("Exception", " " + e);            }        }        else if(requestCode== SELECT_PHOTOID_PDF){            try {                if (resultCode == Activity.RESULT_OK)                {                    Log.w("URI", " " + data);                    Uri selectedFileUri = data.getData();                    Log.w("selectedFileUri", " " + selectedFileUri);                    String filename = getFileName(selectedFileUri);                    Log.w("filename", " " + filename);                    String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedFileUri);                    assert filePath != null;                    File file = new File(filePath); // initialize file here                    long length = file.length() / 1024; // Size in KB                    Log.w("filesize", " " + length);//                    if(length>200){////                        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                                .setTitleText("File Size")//                                .setContentText("Plz choose file size less than 200 kb ")//                                .setConfirmText("Ok")//                                .show();//                    }////                    else{                    photIDPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("pdf/*"), file));                    uploadPhotoIDPdf();                    //}                }            } catch (Exception e) {                Log.w("Exception", " " + e);            }        }    }    @Override    public void onBackPressed() {        super.onBackPressed();        startActivity(new Intent(getApplicationContext(),DoctorProfileScreenActivity.class));        finish();    }    @SuppressLint("NonConstantResourceId")    @Override    public void onClick(View v) {        switch (v.getId()){            case R.id.buttonsubmit:                checkValidation();                break;            case R.id.img_bck:                onBackPressed();                break;            case R.id.buttonAddedu:                addEduc();                break;            case R.id.buttonAddexpr:                addExpr();                break;            case R.id.edtx_from:                getStartDate();                break;            case R.id.edtx_to:                if(edittext_from.getText().toString().equals("")){                    Toasty.warning(getApplicationContext(), "Please Choose Start Date", Toast.LENGTH_SHORT).show();                }                else{                    getEndDate();                }                break;            case R.id.edtx_clinic_pic_choose:                chooseClinicImage();                break;            case R.id.edtx_clinic_certif_choose:                chooseCertPdf();                break;            case R.id.edtx_clinic_govtid_choose:                chooseGovIDPdf();                break;            case R.id.edtx_clinic_photoid_choose:                choosePhotoIDPdf();                break;            case R.id.edtx_edu_yr:                getEduYear();                break;                case R.id.txt_location_change:                gotoSetlocation();                break;        }    }    private void gotoSetlocation() {        Intent intent = new Intent(getApplicationContext(), SetLocationDoctorOldActivity.class);        intent.putExtra("fromactivity",TAG);        startActivity(intent);    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {            if (grantResults.length > 0                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                if (ContextCompat.checkSelfPermission(getApplicationContext(),                        Manifest.permission.ACCESS_FINE_LOCATION)                        == PackageManager.PERMISSION_GRANTED) {                }            } else {                Toast.makeText(getApplicationContext(), "permission denied", Toast.LENGTH_LONG).show();            }        }        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("image/*");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_CLINIC_PICTURE);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Images from Gallery ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);                        })                        .show();            }        }        else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                startActivityForResult(intent, SELECT_CLINIC_CAMERA);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Camera for taking picture")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);                        })                        .show();            }        }        else if (requestCode == REQUEST_READ_CLINIC_PDF_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_CERT_PDF);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Pdf files ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_CLINIC_PDF_PERMISSION);                        })                        .show();            }        }        else if (requestCode == REQUEST_READ_GOVT_ID_PDF_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_GOVTID_PDF);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Pdf Files ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);                            }                        })                        .setCancelButton("Cancel", new SweetAlertDialog.OnSweetClickListener() {                            @Override                            public void onClick(SweetAlertDialog sDialog) {                                sDialog.dismissWithAnimation();                                showWarning(REQUEST_READ_GOVT_ID_PDF_PERMISSION);                            }                        })                        .show();            }        }        else if (requestCode == REQUEST_READ_PHOTO_ID_PDF_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_PHOTOID_PDF);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Pdf files ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_PHOTO_ID_PDF_PERMISSION);                        })                        .show();            }        }        else if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {            // If request is cancelled, the result arrays are empty.            if (grantResults.length > 0                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                // permission was granted, yay! Do the                // location-related task you need to do.//                if(locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)){                    checkValidation();                ////                else {////                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                            .setTitleText("Permisson Required")//                            .setContentText("Plz Turn on Gps ")//                            .setConfirmText("Ok")//                            .setConfirmClickListener(sDialog -> {////                                sDialog.dismissWithAnimation();////                                startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));////                            })//                            .setCancelButton("Cancel", sDialog -> {//                                sDialog.dismissWithAnimation();////                                checkValidation();//                            })//                            .show();//                }            }            else {                    // permission denied                    showWarning(MY_PERMISSIONS_REQUEST_LOCATION);                }            }        else if (requestCode == REQUEST_READ_CERTIFICATE_PIC_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("image/*");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_CERTIFICATE_PICTURE);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Images from Gallery ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_CERTIFICATE_PIC_PERMISSION);                        })                        .show();            }        }        else if (requestCode == REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);                startActivityForResult(intent, SELECT_CERTIFICATE_CAMERA);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Camera for taking picture")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);                        })                        .show();            }        }        else if (requestCode == REQUEST_READ_GOVTID_PIC_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("image/*");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_GOVTID_PICTURE);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Images from Gallery ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_GOVTID_PIC_PERMISSION);                        })                        .show();            }        }        else if (requestCode == REQUEST_GOVTID_CAMERA_PERMISSION_CODE) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);                startActivityForResult(intent, SELECT_GOVTID_CAMERA);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Camera for taking picture")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_GOVTID_CAMERA_PERMISSION_CODE);                        })                        .show();            }        }        else if (requestCode == REQUEST_READ_PHOTOID_PIC_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("image/*");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_PHOTOID_PICTURE);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Images from Gallery ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_PHOTOID_PIC_PERMISSION);                        })                        .show();            }        }        else if (requestCode == REQUEST_PHOTOID_CAMERA_PERMISSION_CODE) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);                startActivityForResult(intent, SELECT_PHOTOID_CAMERA);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Camera for taking picture")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);                        })                        .show();            }        }    }    private void showWarning(int REQUEST_PERMISSION_CODE) {        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                .setTitleText("Sorry!!")                .setContentText("You Can't proceed further unless you allow permission")                .setConfirmText("Ok")                .setConfirmClickListener(sDialog -> {                    sDialog.dismissWithAnimation();                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);                    }                })                .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)                .show();    }    public String getFileName(Uri uri) {        String result = null;        if (uri.getScheme().equals("content")) {            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {                if (cursor != null && cursor.moveToFirst()) {                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));                }            }        }        if (result == null) {            result = uri.getPath();            int cut = result.lastIndexOf('/');            if (cut != -1) {                result = result.substring(cut + 1);            }        }        return result;    }    private void googleApiConnected() {        googleApiClient = new GoogleApiClient.Builder(Objects.requireNonNull(getApplicationContext())).                addConnectionCallbacks(this).                addOnConnectionFailedListener(this).                addApi(LocationServices.API).build();        googleApiClient.connect();    }    private void checkLocation() {        try {            LocationManager lm = (LocationManager) getApplicationContext().getSystemService(Context.LOCATION_SERVICE);            boolean gps_enabled = false;            boolean network_enabled = false;            try {                gps_enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);            } catch (Exception ignored) {            }            try {                network_enabled = lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);            } catch (Exception ignored) {            }            if (!gps_enabled && !network_enabled) {                if (!lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {                    getMyLocation();                }            } else {                getLatandLong();            }        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public void onLocationChanged(Location location) {        mLastLocation = location;       /* latitude = mLastLocation.getLatitude();        longitude = mLastLocation.getLongitude();        Log.w(TAG,"onLocationChanged : "+" latitude : "+latitude+ " longitude : "+longitude);*/    }    @Override    public void onConnected(@Nullable Bundle bundle) {        permissionChecking();    }    @Override    public void onConnectionSuspended(int i) {    }    @Override    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {    }    @SuppressLint("LongLogTag")    @Override    public void onMapReady(GoogleMap googleMap) {    }    private void permissionChecking() {        if (getApplicationContext() != null) {            if (Build.VERSION.SDK_INT >= 23 && (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) &&                    (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {                ActivityCompat.requestPermissions(Objects.requireNonNull(this), new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 5);            } else {                checkLocation();            }        }    }    public void getMyLocation() {        if (googleApiClient != null) {            if (googleApiClient.isConnected()) {                if(getApplicationContext() != null){                    if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {                        // TODO: Consider calling                        //    ActivityCompat#requestPermissions                        // here to request the missing permissions, and then overriding                        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,                        //                                          int[] grantResults)                        // to handle the case where the user grants the permission. See the documentation                        // for ActivityCompat#requestPermissions for more details.                        return;                    }                }                mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);                LocationRequest locationRequest = new LocationRequest();                locationRequest.setInterval(2000);                locationRequest.setFastestInterval(2000);                locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);                LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);                builder.setAlwaysShow(true);                LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, this);                PendingResult<LocationSettingsResult> result = LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build());                result.setResultCallback(result1 -> {                    Status status = result1.getStatus();                    switch (status.getStatusCode()) {                        case LocationSettingsStatusCodes.SUCCESS:                            // All location settings are satisfied.                            // You can initialize location requests here.                            mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);                            Handler handler = new Handler();                            int delay = 1000; //milliseconds                            handler.postDelayed(new Runnable() {                                @SuppressLint("LongLogTag")                                public void run() {                                    //do something                                    Log.w(TAG, "getMyLocation-->");                                    if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {                                        doctorDetailsByUserIdResponseCall();                                    }                                    //parkingListResponseCall(checkinhours,checkouthours,requestCheckinDate,requestCheckoutDate, selectedVehicleTypeId);                                }                            }, delay);                            break;                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:                            try {                                status.startResolutionForResult(this, REQUEST_CHECK_SETTINGS_GPS);                            } catch (IntentSender.SendIntentException e) {                                // Ignore the error.                            }                            break;                        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:                            break;                    }                });            }        }    }    private void getLatandLong() {        try {            if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);            } else {                GPSTracker gps = new GPSTracker(getApplicationContext());                // Check if GPS enabled                if (gps.canGetLocation()) {                    latitude = gps.getLatitude();                    longitude = gps.getLongitude();                    Log.w(TAG, "getLatandLong--->" + "latitude" + " " + latitude + "longitude" + " " + longitude);                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    public boolean validdCommunicationType() {        if(strcommunicationtype.equalsIgnoreCase("Select Communication Type")){            final AlertDialog alertDialog = new AlertDialog.Builder(EditDoctorBusinessInfoActivity.this).create();            alertDialog.setMessage(getString(R.string.err_msg_type_of_communicationtype));            alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "Ok",                    (dialog, which) -> alertDialog.cancel());            alertDialog.show();            return false;        }        return true;    }    @SuppressLint("LogNotTimber")    private void doctorDetailsByUserIdResponseCall() {        avi_indicator.setVisibility(View.VISIBLE);        avi_indicator.smoothToShow();        RestApiInterface ApiService = APIClient.getClient().create(RestApiInterface.class);        Call<DoctorDetailsByUserIdResponse> call = ApiService.doctorDetailsByUserIdResponseCall(RestUtils.getContentType(),doctorDetailsByUserIdRequest());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<DoctorDetailsByUserIdResponse>() {            @SuppressLint({"SetTextI18n", "LogNotTimber"})            @Override            public void onResponse(@NonNull Call<DoctorDetailsByUserIdResponse> call, @NonNull Response<DoctorDetailsByUserIdResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"DoctorDetailsByUserIdResponse"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if(200 == response.body().getCode()){                        if(response.body().getData().getClinic_pic() != null) {                            doctorclinicdetailsResponseList = response.body().getData().getClinic_pic();                        }                        if(response.body().getData() != null) {                            id = response.body().getData().get_id();                            Dr_title = response.body().getData().getDr_title();                            Dr_name = response.body().getData().getDr_name();                            strcommunicationtype = response.body().getData().getCommunication_type();                        }                        if(response.body().getData().getClinic_name() != null){                            edittext_clinic_name.setText(response.body().getData().getClinic_name());                        } if(response.body().getData().getConsultancy_fees() != 0){                            edtx_service_charge_amount.setText(response.body().getData().getConsultancy_fees()+"");                        }                        if(!isSetAddress){                             if(response.body().getData().getClinic_loc() != null){                                 Clinic_loc = response.body().getData().getClinic_loc();                                 txt_clinic_addr.setText(response.body().getData().getClinic_loc()+"");                             }                            Clinic_lat = response.body().getData().getClinic_lat();                            Clinic_long = response.body().getData().getClinic_long();                            Log.w(TAG, "Clinic_lat : " + Clinic_lat + " Clinic_long : " + Clinic_long);                        }                        if (response.body().getData().getEducation_details() != null){                            education_detailsList= response.body().getData().getEducation_details();                            for(int i=0;i<education_detailsList.size();i++) {                                DoctorBusinessInfoUpdateRequest.EducationDetailsBean educationDetailsBean = new DoctorBusinessInfoUpdateRequest.EducationDetailsBean();                                educationDetailsBean.setEducation(education_detailsList.get(i).getEducation());                                educationDetailsBean.setYear(education_detailsList.get(i).getYear());                                education_details.add(educationDetailsBean);                            }                        }if (response.body().getData().getExperience_details() != null){                            experience_detailsList= response.body().getData().getExperience_details();                            for(int i=0;i<experience_detailsList.size();i++) {                                DoctorBusinessInfoUpdateRequest.ExperienceDetailsBean experienceDetailsBean = new DoctorBusinessInfoUpdateRequest.ExperienceDetailsBean();                                experienceDetailsBean.setCompany(experience_detailsList.get(i).getCompany());                                experienceDetailsBean.setFrom(experience_detailsList.get(i).getFrom());                                experienceDetailsBean.setTo(experience_detailsList.get(i).getTo());                                experienceDetailsBean.setYearsofexperience(experience_detailsList.get(i).getYearsofexperience());                                experience_details.add(experienceDetailsBean);                            }                        }if (response.body().getData().getSpecialization() != null){                            specialzationListEdit = response.body().getData().getSpecialization();                        }if (response.body().getData().getPet_handled() != null){                            pethandleListEdit = response.body().getData().getPet_handled();                        }                        if(education_detailsList != null && education_detailsList.size()>0){                            recylerView_added_education.setVisibility(View.VISIBLE);                            setDoctorEducations(education_detailsList);                        }else{                            recylerView_added_education.setVisibility(View.GONE);                        }                        if(experience_detailsList != null && experience_detailsList.size()>0){                            recylerView_added_experience.setVisibility(View.VISIBLE);                            setDoctorExperience(experience_detailsList);                        }else{                            recylerView_added_experience.setVisibility(View.GONE);                        }                        if(response.body().getData().getClinic_pic() != null){                            clinicPicBeansEdit = response.body().getData().getClinic_pic();                           for(int i=0;i<clinicPicBeansEdit.size();i++){                                DoctorBusinessInfoUpdateRequest.ClinicPicBean clinicPicBean = new DoctorBusinessInfoUpdateRequest.ClinicPicBean();                                clinicPicBean.setClinic_pic(clinicPicBeansEdit.get(i).getClinic_pic());                                clinic_pic.add(clinicPicBean);                            }                            doctorEditClinicImageListAdapter = new DoctorEditClinicImageListAdapter(getApplicationContext(), clinicPicBeansEdit,clinic_pic);                            recylerView_choosen_clinic_images.setAdapter(doctorEditClinicImageListAdapter);                        }                        if(response.body().getData().getCertificate_pic() != null){                            certificatePicBeansEdit = response.body().getData().getCertificate_pic();                            for(int i=0;i<certificatePicBeansEdit.size();i++){                                DoctorBusinessInfoUpdateRequest.CertificatePicBean certificatePicBean = new DoctorBusinessInfoUpdateRequest.CertificatePicBean();                                certificatePicBean.setCertificate_pic(certificatePicBeansEdit.get(i).getCertificate_pic());                                certificate_pic.add(certificatePicBean);                            }                            doctorEditCertificateListAdapter = new DoctorEditCertificateListAdapter(getApplicationContext(), certificatePicBeansEdit,certificate_pic);                            recylerView_choosen_certificate_images.setAdapter(doctorEditCertificateListAdapter);                        }                        if(response.body().getData().getGovt_id_pic() != null){                            govtIdPicBeansEdit = response.body().getData().getGovt_id_pic();                            for(int i=0;i<govtIdPicBeansEdit.size();i++){                                DoctorBusinessInfoUpdateRequest.GovtIdPicBean govtIdPicBean = new DoctorBusinessInfoUpdateRequest.GovtIdPicBean();                                govtIdPicBean.setGovt_id_pic(govtIdPicBeansEdit.get(i).getGovt_id_pic());                                govt_id_pic.add(govtIdPicBean);                            }                            doctorEditGovtIDListAdapter = new DoctorEditGovtIDListAdapter(getApplicationContext(), govtIdPicBeansEdit,govt_id_pic);                            recylerView_choosen_govtid_images.setAdapter(doctorEditGovtIDListAdapter);                        }                        if(response.body().getData().getPhoto_id_pic() != null){                            photoIdPicBeansEdit = response.body().getData().getPhoto_id_pic();                            for(int i=0;i<photoIdPicBeansEdit.size();i++){                                DoctorBusinessInfoUpdateRequest.PhotoIdPicBean photoIdPicBean = new DoctorBusinessInfoUpdateRequest.PhotoIdPicBean();                                photoIdPicBean.setPhoto_id_pic(photoIdPicBeansEdit.get(i).getPhoto_id_pic());                                photo_id_pic.add(photoIdPicBean);                            }                            doctorEditPhotoIDListAdapter = new DoctorEditPhotoIDListAdapter(getApplicationContext(), photoIdPicBeansEdit,photo_id_pic);                            recylerView_choosen_photo_id_images.setAdapter(doctorEditPhotoIDListAdapter);                        }                        if(response.body().getData().getSignature() != null && !response.body().getData().getSignature().isEmpty()){                            Log.w(TAG,"getSignature : "+response.body().getData().getSignature());                            digitalSignatureServerUrlImagePath = response.body().getData().getSignature();                            Log.w(TAG,"digitalSignatureServerUrlImagePath : "+digitalSignatureServerUrlImagePath);                            if (digitalSignatureServerUrlImagePath != null && !digitalSignatureServerUrlImagePath.isEmpty()) {                                Glide.with(getApplicationContext())                                        .load(digitalSignatureServerUrlImagePath)                                        .into(ivdigitalsignature);                            }                        }                        clinic_about_dr = response.body().getData().getDoctor_info();                        clinic_dr_id = response.body().getData().getDoctor_id();                        clinic_number = response.body().getData().getClinic_no();                        if(clinic_about_dr!=null&&!clinic_about_dr.isEmpty()){                            edtx_about_doctor.setText(clinic_about_dr+"");                        }                        else {                            edtx_about_doctor.setText("");                        }                        if(clinic_dr_id!=null&&!clinic_dr_id.isEmpty()){                            edtx_doctor_id.setText(clinic_dr_id+"");                        }                        else {                            edtx_doctor_id.setText("");                        }                        if(clinic_number!=null&&!clinic_number.isEmpty()){                            edtx_clinic_number.setText(clinic_number+"");                        }                        else {                            edtx_clinic_number.setText("");                        }                                           if (new ConnectionDetector(EditDoctorBusinessInfoActivity.this).isNetworkAvailable(EditDoctorBusinessInfoActivity.this)) {                            dropDownListResponseCall();                        }                    }else{                    }                }            }            @Override            public void onFailure(@NonNull Call<DoctorDetailsByUserIdResponse> call, @NonNull Throwable t) {                avi_indicator.smoothToHide();                Log.w(TAG,"DoctorDetailsResponse flr"+"--->" + t.getMessage());            }        });    }    private void setDoctorExperience(List<DoctorDetailsByUserIdResponse.DataBean.ExperienceDetailsBean> experience_detailsList) {        recylerView_added_experience.setLayoutManager(new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.VERTICAL, false));        recylerView_added_experience.setItemAnimator(new DefaultItemAnimator());        DoctorAddExpAdapter doctorAddExpAdapter = new DoctorAddExpAdapter(getApplicationContext(),experience_detailsList,experience_details);        recylerView_added_experience.setAdapter(doctorAddExpAdapter);    }    private void setDoctorEducations(List<DoctorDetailsByUserIdResponse.DataBean.EducationDetailsBean> education_detailsList) {        recylerView_added_education.setLayoutManager(new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.VERTICAL, false));        recylerView_added_education.setItemAnimator(new DefaultItemAnimator());        DoctorAddEducAdapter doctorAddEducAdapter = new DoctorAddEducAdapter(getApplicationContext(),education_detailsList,education_details);        recylerView_added_education.setAdapter(doctorAddEducAdapter);    }    private DoctorDetailsByUserIdRequest doctorDetailsByUserIdRequest() {        DoctorDetailsByUserIdRequest doctorDetailsByUserIdRequest = new DoctorDetailsByUserIdRequest();        doctorDetailsByUserIdRequest.setUser_id(user_id);        Log.w(TAG,"doctorDetailsByUserIdRequest"+ "--->" + new Gson().toJson(doctorDetailsByUserIdRequest));        return doctorDetailsByUserIdRequest;    }    @SuppressLint({"LongLogTag", "LogNotTimber"})    private void doctorBusinessInfoUpdateResponseCall() {        avi_indicator.setVisibility(View.VISIBLE);        avi_indicator.smoothToShow();        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);        Call<DocBusInfoUploadResponse> call = apiInterface.doctorBusinessInfoUpdateResponseCall(RestUtils.getContentType(), doctorBusinessInfoUpdateRequest());        Log.w(TAG,"doctorBusinessInfoUpdateResponseCall url  :%s"+" "+ call.request().url().toString());        call.enqueue(new Callback<DocBusInfoUploadResponse>() {            @SuppressLint({"LongLogTag", "LogNotTimber"})            @Override            public void onResponse(@NonNull Call<DocBusInfoUploadResponse> call, @NonNull Response<DocBusInfoUploadResponse> response) {                Log.w(TAG,"doctorBusinessInfoUpdateResponseCall"+ "--->" + new Gson().toJson(response.body()));                avi_indicator.smoothToHide();                if (response.body() != null) {                    if(response.body().getCode() == 200){                        startActivity(new Intent(getApplicationContext(), DoctorDashboardActivity.class));                        finish();                    }                    else{                        showErrorLoading(response.body().getMessage());                    }                }            }            @SuppressLint("LongLogTag")            @Override            public void onFailure(@NonNull Call<DocBusInfoUploadResponse> call, @NonNull Throwable t) {                avi_indicator.smoothToHide();                Log.w(TAG,"doctorBusinessInfoUpdateResponseCall flr"+"--->" + t.getMessage());            }        });    }    @SuppressLint("LongLogTag")    private DoctorBusinessInfoUpdateRequest doctorBusinessInfoUpdateRequest() {        /*         * _id : 5fb3bde8fda8295ba10a72fe         * user_id : 5fb22773e70b0d3cc5b2c19d         * dr_title : Dr         * dr_name : mohammed         * clinic_name : Mohammed Clinic         * clinic_loc : Muthamil nager Kodugaiyur         * clinic_lat : 18.12         * clinic_long : 80.0987         * education_details : [{"education":"10 th pass","year":"2020"},{"education":"10 th pass","year":"2020"}]         * experience_details : [{"company":"triton it slotuions","from":"22-10-2020","to":"22-10-2021"},{"company":"triton it slotuions","from":"22-10-2020","to":"22-10-2021"},{"company":"triton it slotuions","from":"22-10-2020","to":"22-10-2021"}]         * specialization : [{"specialization":"Spec - 1"},{"specialization":"Spec - 1"},{"specialization":"Spec - 1"}]         * pet_handled : [{"pet_handled":"Pet - 1"},{"pet_handled":"Pet - 1"}]         * clinic_pic :         * certificate_pic : [{"certificate_pic":""},{"certificate_pic":""}]         * govt_id_pic : [{"govt_id_pic":""},{"govt_id_pic":""}]         * photo_id_pic : [{"photo_id_pic":""},{"photo_id_pic":""}]         * profile_status : 0         * profile_verification_status : Not verified         * date_and_time : 23-10-2020 11:10 AM         */        if(Clinic_lat == 0){            Clinic_lat = latitude;        }if(Clinic_long == 0){            Clinic_long = longitude;        }        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm aa", Locale.getDefault());        String currentDateandTime = sdf.format(new Date());        DoctorBusinessInfoUpdateRequest doctorBusinessInfoUpdateRequest = new DoctorBusinessInfoUpdateRequest();        doctorBusinessInfoUpdateRequest.set_id(id);        doctorBusinessInfoUpdateRequest.setUser_id(user_id);        doctorBusinessInfoUpdateRequest.setDr_title(Dr_title);        doctorBusinessInfoUpdateRequest.setDr_name(Dr_name);        doctorBusinessInfoUpdateRequest.setClinic_name(edittext_clinic_name.getText().toString());        doctorBusinessInfoUpdateRequest.setClinic_loc(txt_clinic_addr.getText().toString());        doctorBusinessInfoUpdateRequest.setCommunication_type(strcommunicationtype);        doctorBusinessInfoUpdateRequest.setClinic_lat(Clinic_lat);        doctorBusinessInfoUpdateRequest.setClinic_long(Clinic_long);        doctorBusinessInfoUpdateRequest.setEducation_details(education_details);        doctorBusinessInfoUpdateRequest.setExperience_details(experience_details);        doctorBusinessInfoUpdateRequest.setSpecialization(specialization);        doctorBusinessInfoUpdateRequest.setPet_handled(pet_handled);        doctorBusinessInfoUpdateRequest.setClinic_pic(clinic_pic);        doctorBusinessInfoUpdateRequest.setCertificate_pic(certificate_pic);        doctorBusinessInfoUpdateRequest.setGovt_id_pic(govt_id_pic);        doctorBusinessInfoUpdateRequest.setPhoto_id_pic(photo_id_pic);        doctorBusinessInfoUpdateRequest.setProfile_status(true);        doctorBusinessInfoUpdateRequest.setProfile_verification_status("Last update not verified");        doctorBusinessInfoUpdateRequest.setDate_and_time(currentDateandTime);        doctorBusinessInfoUpdateRequest.setDoctor_exp(0);        doctorBusinessInfoUpdateRequest.setConsultancy_fees(consultancy_fees);        doctorBusinessInfoUpdateRequest.setMobile_type("Android");        doctorBusinessInfoUpdateRequest.setSignature(digitalSignatureServerUrlImagePath);        doctorBusinessInfoUpdateRequest.setDoctor_id(clinic_dr_id);        doctorBusinessInfoUpdateRequest.setClinic_no(clinic_number);        doctorBusinessInfoUpdateRequest.setDoctor_info(clinic_about_dr);        if(Clinic_lat!=0&&Clinic_long!=0){            String city = getCity(Clinic_lat,Clinic_long);            if(city!=null&&!city.isEmpty()){                doctorBusinessInfoUpdateRequest.setCity_name(city);            }        }        Log.w(TAG,"doctorBusinessInfoUpdateRequest Request"+ "--->" + new Gson().toJson(doctorBusinessInfoUpdateRequest));        return doctorBusinessInfoUpdateRequest;    }    private String getCity(double clinic_lat, double clinic_long) {        Geocoder geocoder = new Geocoder(this, Locale.getDefault());        List<Address> addresses = null;        try {            addresses = geocoder.getFromLocation(clinic_lat, clinic_long, 1);        } catch (IOException e) {            e.printStackTrace();        }        Log.w(TAG,"addresses " + new Gson().toJson(addresses));        String cityName = addresses.get(0).getLocality();        String stateName = addresses.get(0).getSubLocality();        String countryName = addresses.get(0).getSubAdminArea();        return cityName;    }    public void showErrorLoading(String errormesage){        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);        alertDialogBuilder.setMessage(errormesage);        alertDialogBuilder.setPositiveButton("ok",                (arg0, arg1) -> hideLoading());        AlertDialog alertDialog = alertDialogBuilder.create();        alertDialog.show();    }    public void hideLoading(){        try {            alertDialog.dismiss();        }catch (Exception ignored){        }    }    public boolean addJpgSignatureToGallery(Bitmap signature) {        boolean result = false;        try {            File photo = new File(getAlbumStorageDir("SignaturePad"), String.format("Signature_%d.jpg", System.currentTimeMillis()));            saveBitmapToJPG(signature, photo);            scanMediaFile(photo);            Log.w(TAG,"signature :"+signature+"  "+"photo:"+photo);            StoredPathDigitalSignature = String.valueOf(photo);            Log.w(TAG,"StoredPathDigitalSignature--->"+StoredPathDigitalSignature);            uploadDigitalSignatureImageRequest();            result = true;        } catch (IOException e) {            e.printStackTrace();        }        return result;    }    public File getAlbumStorageDir(String albumName) {        // Get the directory for the user's public pictures directory.        File file = new File(Environment.getExternalStoragePublicDirectory(                Environment.DIRECTORY_PICTURES), albumName);        Log.w(TAG,"file:"+file);        if (!file.mkdirs()) {            Log.e("SignaturePad", "Directory not created");        }        return file;    }    public void saveBitmapToJPG(Bitmap bitmap, File photo) throws IOException {        Bitmap newBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);        Canvas canvas = new Canvas(newBitmap);        canvas.drawColor(Color.WHITE);        canvas.drawBitmap(bitmap, 0, 0, null);        OutputStream stream = new FileOutputStream(photo);        newBitmap.compress(Bitmap.CompressFormat.JPEG, 80, stream);        Log.w(TAG,"bitmap :"+bitmap+"  "+"photo:"+photo);        stream.close();    }    private void scanMediaFile(File photo) {        Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);        Uri contentUri = Uri.fromFile(photo);        mediaScanIntent.setData(contentUri);        Log.w(TAG,"contentUri"+contentUri);        EditDoctorBusinessInfoActivity.this.sendBroadcast(mediaScanIntent);    }    @SuppressLint("LogNotTimber")    private void uploadDigitalSignatureImageRequest1() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(getdigitalSignaturePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"Profpic"+ "--->" + new Gson().toJson(response.body()));                llheaderdigitalsignature.setVisibility(View.GONE);                mSignaturePad.clear();                Log.w(TAG,"DigitalSignaturepic"+ "--->" + new Gson().toJson(response.body()));                // Log.w(TAG,"Profile"+ "status " + status);                if (response.body() != null && response.body().getCode() == 200) {                    if (response.body() != null) {                        digitalSignatureServerUrlImagePath = response.body().getData();                        Log.w(TAG, "digitalSignatureServerUrlImagePath " + digitalSignatureServerUrlImagePath);                        Calendar c = Calendar.getInstance();                        Log.w(TAG, "Current time => " + c.getTime());                        if (digitalSignatureServerUrlImagePath != null && !digitalSignatureServerUrlImagePath.isEmpty()) {                            Log.w(TAG,"digitalSignatureServerUrlImagePath--->"+digitalSignatureServerUrlImagePath);                            Glide                                    .with(getApplicationContext())                                    .load(digitalSignatureServerUrlImagePath)                                    .apply(new RequestOptions().override(600, 200))                                    .diskCacheStrategy(DiskCacheStrategy.ALL)                                    .into(ivdigitalsignature);                        }                        else{                            Glide.with(getApplicationContext())                                    .load(R.drawable.digital_signature)                                    .into(ivdigitalsignature);                        }                    } else {                        Log.w(TAG, "digitalSignatureServerUrlImagePath " + "response body null part wotking ");                    }                }            }            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                avi_indicator.smoothToHide();                mSignaturePad.clear();                llheaderdigitalsignature.setVisibility(View.GONE);                Log.w(TAG,"digitalSignatureServerUrlImagePath"+ "On failure working"+ t.getMessage());            }        });    }    private MultipartBody.Part getdigitalSignaturePicMultipart() {        StoredPathDigitalSignature = decodeFile(StoredPathDigitalSignature, 500, 500);        RequestBody requestFile = RequestBody.create(MediaType.parse("text/plain"), "");        if (StoredPathDigitalSignature != null && !StoredPathDigitalSignature.isEmpty()) {            File file = new File(StoredPathDigitalSignature);            requestFile = RequestBody.create(MediaType.parse("image/*"), file);        }        Log.w(TAG,"getdigitalSignaturePicMultipart--->"+"StoredPathDigitalSignature :"+ StoredPathDigitalSignature +" "+"requestFile :"+requestFile);        MultipartBody.Part filePart = MultipartBody.Part.createFormData("sampleFile",StoredPathDigitalSignature, requestFile);        Log.w(TAG,"ImageStorepath"+ "getdigitalSignaturePicMultipart: " + new Gson().toJson(filePart));        return filePart;    }    private void uploadDigitalSignatureImageRequest() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(siganaturePart);        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @SuppressLint("LogNotTimber")            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"Profpic"+ "--->" + new Gson().toJson(response.body()));                llheaderdigitalsignature.setVisibility(View.GONE);                mSignaturePad.clear();                Log.w(TAG,"DigitalSignaturepic"+ "--->" + new Gson().toJson(response.body()));                // Log.w(TAG,"Profile"+ "status " + status);                if (response.body() != null && response.body().getCode() == 200) {                    if (response.body() != null) {                        digitalSignatureServerUrlImagePath = response.body().getData();                        Log.w(TAG, "digitalSignatureServerUrlImagePath " + digitalSignatureServerUrlImagePath);                        Calendar c = Calendar.getInstance();                        if (digitalSignatureServerUrlImagePath != null && !digitalSignatureServerUrlImagePath.isEmpty()) {                            Log.w(TAG,"digitalSignatureServerUrlImagePath--->"+digitalSignatureServerUrlImagePath);                            Glide                                    .with(getApplicationContext())                                    .load(digitalSignatureServerUrlImagePath)                                    .apply(new RequestOptions().override(600, 200))                                    .diskCacheStrategy(DiskCacheStrategy.ALL)                                    .into(ivdigitalsignature);                        }                        else{                            Glide.with(getApplicationContext())                                    .load(R.drawable.digital_signature)                                    .into(ivdigitalsignature);                        }                    } else {                        Log.w(TAG, "digitalSignatureServerUrlImagePath " + "response body null part wotking ");                    }                }            }            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"DigitalSignaturepic"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    private String decodeFile(String path, int DESIREDWIDTH, int DESIREDHEIGHT) {        Bitmap scaledBitmap = null;        try {            // Part 1: Decode image            Bitmap unscaledBitmap = ScalingUtilities.decodeFile(path, DESIREDWIDTH, DESIREDHEIGHT, ScalingUtilities.ScalingLogic.FIT);            if (!(unscaledBitmap.getWidth() <= DESIREDWIDTH && unscaledBitmap.getHeight() <= DESIREDHEIGHT)) {                // Part 2: Scale image                scaledBitmap = ScalingUtilities.createScaledBitmap(unscaledBitmap, DESIREDWIDTH, DESIREDHEIGHT, ScalingUtilities.ScalingLogic.FIT);            } else {                unscaledBitmap.recycle();                return path;            }            // Store to tmp file            String extr = Environment.getExternalStorageDirectory().toString();            File mFolder = new File(extr + "/Petfolio");            if (!mFolder.exists()) {                mFolder.mkdir();            }            Long tsLong = System.currentTimeMillis()/1000;            String ts = tsLong.toString();            String s = ts+","+"tmp.png";            Log.w(TAG,"Test"+ extr + s);            File f = new File(mFolder.getAbsolutePath(), s);            strMyImagePath = f.getAbsolutePath();            Log.w(TAG,"strMyImagePath"+ strMyImagePath);            FileOutputStream fos = null;            try {                fos = new FileOutputStream(f);                scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 75, fos);                fos.flush();                fos.close();            } catch (FileNotFoundException e) {                e.printStackTrace();            } catch (Exception e) {                e.printStackTrace();            }            scaledBitmap.recycle();        } catch (Throwable e) {        }        if (strMyImagePath == null) {            Log.w(TAG,"profile "+ "Image path null");            return path;        }        return strMyImagePath;    }}